// Generated by Dagger (https://dagger.dev).
package com.example.musify.di;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.example.musify.data.encoder.AndroidBase64Encoder;
import com.example.musify.data.remote.musicservice.SpotifyService;
import com.example.musify.data.remote.token.tokenmanager.TokenManager;
import com.example.musify.data.repositories.albumsrepository.MusifyAlbumsRepository;
import com.example.musify.data.repositories.genresrepository.MusifyGenresRepository;
import com.example.musify.data.repositories.homefeedrepository.MusifyHomeFeedRepository;
import com.example.musify.data.repositories.searchrepository.MusifySearchRepository;
import com.example.musify.data.repositories.tokenrepository.SpotifyTokenRepository;
import com.example.musify.data.repositories.tokenrepository.TokenRepository;
import com.example.musify.data.repositories.tracksrepository.MusifyTracksRepository;
import com.example.musify.musicplayer.MusicPlayerV2;
import com.example.musify.musicplayer.MusifyBackgroundMusicPlayerV2;
import com.example.musify.ui.activities.MainActivity;
import com.example.musify.usecases.downloadDrawableFromUrlUseCase.MusifyDownloadDrawableFromUrlUseCase;
import com.example.musify.usecases.getCurrentlyPlayingTrackUseCase.MusifyGetCurrentlyPlayingTrackUseCase;
import com.example.musify.viewmodels.AlbumDetailViewModel;
import com.example.musify.viewmodels.AlbumDetailViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.musify.viewmodels.PlaybackViewModel;
import com.example.musify.viewmodels.PlaybackViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.musify.viewmodels.PlaylistDetailViewModel;
import com.example.musify.viewmodels.PlaylistDetailViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.musify.viewmodels.artistviewmodel.ArtistDetailViewModel;
import com.example.musify.viewmodels.artistviewmodel.ArtistDetailViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.musify.viewmodels.homefeedviewmodel.HomeFeedViewModel;
import com.example.musify.viewmodels.homefeedviewmodel.HomeFeedViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.musify.viewmodels.homefeedviewmodel.greetingphrasegenerator.CurrentTimeBasedGreetingPhraseGenerator;
import com.example.musify.viewmodels.searchviewmodel.SearchViewModel;
import com.example.musify.viewmodels.searchviewmodel.SearchViewModel_HiltModules_KeyModule_ProvideFactory;
import com.google.android.exoplayer2.ExoPlayer;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMusifyApplication_HiltComponents_SingletonC extends MusifyApplication_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final DaggerMusifyApplication_HiltComponents_SingletonC singletonC = this;

  private Provider<ExoPlayer> provideExoplayerProvider;

  private Provider<MusifyBackgroundMusicPlayerV2> musifyBackgroundMusicPlayerV2Provider;

  private Provider<MusicPlayerV2> bindMusicPlayerV2Provider;

  private Provider<TokenManager> provideTokenManagerProvider;

  private Provider<SpotifyTokenRepository> spotifyTokenRepositoryProvider;

  private Provider<TokenRepository> bindTokenRepositoryProvider;

  private Provider<SpotifyService> provideSpotifyServiceProvider;

  private DaggerMusifyApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    initialize(applicationContextModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationContextModule applicationContextModuleParam) {
    this.provideExoplayerProvider = DoubleCheck.provider(new SwitchingProvider<ExoPlayer>(singletonC, 1));
    this.musifyBackgroundMusicPlayerV2Provider = new SwitchingProvider<>(singletonC, 0);
    this.bindMusicPlayerV2Provider = DoubleCheck.provider((Provider) musifyBackgroundMusicPlayerV2Provider);
    this.provideTokenManagerProvider = DoubleCheck.provider(new SwitchingProvider<TokenManager>(singletonC, 3));
    this.spotifyTokenRepositoryProvider = new SwitchingProvider<>(singletonC, 2);
    this.bindTokenRepositoryProvider = DoubleCheck.provider((Provider) spotifyTokenRepositoryProvider);
    this.provideSpotifyServiceProvider = DoubleCheck.provider(new SwitchingProvider<SpotifyService>(singletonC, 4));
  }

  @Override
  public void injectMusifyApplication(MusifyApplication arg0) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder exoPlayerModule(ExoPlayerModule exoPlayerModule) {
      Preconditions.checkNotNull(exoPlayerModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder musicServiceModule(MusicServiceModule musicServiceModule) {
      Preconditions.checkNotNull(musicServiceModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder pagingConfigModule(PagingConfigModule pagingConfigModule) {
      Preconditions.checkNotNull(pagingConfigModule);
      return this;
    }

    public MusifyApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerMusifyApplication_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements MusifyApplication_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerMusifyApplication_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerMusifyApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public MusifyApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements MusifyApplication_HiltComponents.ActivityC.Builder {
    private final DaggerMusifyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerMusifyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public MusifyApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements MusifyApplication_HiltComponents.FragmentC.Builder {
    private final DaggerMusifyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerMusifyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public MusifyApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements MusifyApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerMusifyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(DaggerMusifyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MusifyApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements MusifyApplication_HiltComponents.ViewC.Builder {
    private final DaggerMusifyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerMusifyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MusifyApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements MusifyApplication_HiltComponents.ViewModelC.Builder {
    private final DaggerMusifyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerMusifyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public MusifyApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements MusifyApplication_HiltComponents.ServiceC.Builder {
    private final DaggerMusifyApplication_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerMusifyApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MusifyApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends MusifyApplication_HiltComponents.ViewWithFragmentC {
    private final DaggerMusifyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerMusifyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends MusifyApplication_HiltComponents.FragmentC {
    private final DaggerMusifyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerMusifyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends MusifyApplication_HiltComponents.ViewC {
    private final DaggerMusifyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerMusifyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends MusifyApplication_HiltComponents.ActivityC {
    private final DaggerMusifyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerMusifyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity arg0) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return ImmutableSet.<String>of(AlbumDetailViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ArtistDetailViewModel_HiltModules_KeyModule_ProvideFactory.provide(), HomeFeedViewModel_HiltModules_KeyModule_ProvideFactory.provide(), PlaybackViewModel_HiltModules_KeyModule_ProvideFactory.provide(), PlaylistDetailViewModel_HiltModules_KeyModule_ProvideFactory.provide(), SearchViewModel_HiltModules_KeyModule_ProvideFactory.provide());
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends MusifyApplication_HiltComponents.ViewModelC {
    private final SavedStateHandle savedStateHandle;

    private final DaggerMusifyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<AlbumDetailViewModel> albumDetailViewModelProvider;

    private Provider<ArtistDetailViewModel> artistDetailViewModelProvider;

    private Provider<HomeFeedViewModel> homeFeedViewModelProvider;

    private Provider<PlaybackViewModel> playbackViewModelProvider;

    private Provider<PlaylistDetailViewModel> playlistDetailViewModelProvider;

    private Provider<SearchViewModel> searchViewModelProvider;

    private ViewModelCImpl(DaggerMusifyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.savedStateHandle = savedStateHandleParam;
      initialize(savedStateHandleParam);

    }

    private MusifyGetCurrentlyPlayingTrackUseCase musifyGetCurrentlyPlayingTrackUseCase() {
      return new MusifyGetCurrentlyPlayingTrackUseCase(singletonC.bindMusicPlayerV2Provider.get());
    }

    private MusifyTracksRepository musifyTracksRepository() {
      return new MusifyTracksRepository(singletonC.bindTokenRepositoryProvider.get(), singletonC.provideSpotifyServiceProvider.get(), PagingConfigModule_ProvideDefaultPagingConfigFactory.provideDefaultPagingConfig());
    }

    private MusifyAlbumsRepository musifyAlbumsRepository() {
      return new MusifyAlbumsRepository(singletonC.bindTokenRepositoryProvider.get(), singletonC.provideSpotifyServiceProvider.get(), PagingConfigModule_ProvideDefaultPagingConfigFactory.provideDefaultPagingConfig());
    }

    private MusifyHomeFeedRepository musifyHomeFeedRepository() {
      return new MusifyHomeFeedRepository(singletonC.provideSpotifyServiceProvider.get(), singletonC.bindTokenRepositoryProvider.get());
    }

    private MusifyDownloadDrawableFromUrlUseCase musifyDownloadDrawableFromUrlUseCase() {
      return new MusifyDownloadDrawableFromUrlUseCase(CoroutineDispatchersModule_ProvideIoDispatcherFactory.provideIoDispatcher());
    }

    private MusifySearchRepository musifySearchRepository() {
      return new MusifySearchRepository(singletonC.bindTokenRepositoryProvider.get(), singletonC.provideSpotifyServiceProvider.get(), PagingConfigModule_ProvideDefaultPagingConfigFactory.provideDefaultPagingConfig());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.albumDetailViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
      this.artistDetailViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
      this.homeFeedViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 2);
      this.playbackViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 3);
      this.playlistDetailViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 4);
      this.searchViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 5);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return ImmutableMap.<String, Provider<ViewModel>>builderWithExpectedSize(6).put("com.example.musify.viewmodels.AlbumDetailViewModel", (Provider) albumDetailViewModelProvider).put("com.example.musify.viewmodels.artistviewmodel.ArtistDetailViewModel", (Provider) artistDetailViewModelProvider).put("com.example.musify.viewmodels.homefeedviewmodel.HomeFeedViewModel", (Provider) homeFeedViewModelProvider).put("com.example.musify.viewmodels.PlaybackViewModel", (Provider) playbackViewModelProvider).put("com.example.musify.viewmodels.PlaylistDetailViewModel", (Provider) playlistDetailViewModelProvider).put("com.example.musify.viewmodels.searchviewmodel.SearchViewModel", (Provider) searchViewModelProvider).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerMusifyApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(DaggerMusifyApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.musify.viewmodels.AlbumDetailViewModel 
          return (T) new AlbumDetailViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), viewModelCImpl.savedStateHandle, viewModelCImpl.musifyGetCurrentlyPlayingTrackUseCase(), viewModelCImpl.musifyTracksRepository());

          case 1: // com.example.musify.viewmodels.artistviewmodel.ArtistDetailViewModel 
          return (T) new ArtistDetailViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), viewModelCImpl.savedStateHandle, viewModelCImpl.musifyAlbumsRepository(), viewModelCImpl.musifyGetCurrentlyPlayingTrackUseCase(), viewModelCImpl.musifyTracksRepository());

          case 2: // com.example.musify.viewmodels.homefeedviewmodel.HomeFeedViewModel 
          return (T) new HomeFeedViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), new CurrentTimeBasedGreetingPhraseGenerator(), viewModelCImpl.musifyHomeFeedRepository());

          case 3: // com.example.musify.viewmodels.PlaybackViewModel 
          return (T) new PlaybackViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.bindMusicPlayerV2Provider.get(), viewModelCImpl.musifyDownloadDrawableFromUrlUseCase());

          case 4: // com.example.musify.viewmodels.PlaylistDetailViewModel 
          return (T) new PlaylistDetailViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), viewModelCImpl.savedStateHandle, viewModelCImpl.musifyTracksRepository(), viewModelCImpl.musifyGetCurrentlyPlayingTrackUseCase());

          case 5: // com.example.musify.viewmodels.searchviewmodel.SearchViewModel 
          return (T) new SearchViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), viewModelCImpl.musifyGetCurrentlyPlayingTrackUseCase(), CoroutineDispatchersModule_ProvideIoDispatcherFactory.provideIoDispatcher(), new MusifyGenresRepository(), viewModelCImpl.musifySearchRepository());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends MusifyApplication_HiltComponents.ActivityRetainedC {
    private final DaggerMusifyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerMusifyApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerMusifyApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerMusifyApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends MusifyApplication_HiltComponents.ServiceC {
    private final DaggerMusifyApplication_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerMusifyApplication_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerMusifyApplication_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerMusifyApplication_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // com.example.musify.musicplayer.MusifyBackgroundMusicPlayerV2 
        return (T) new MusifyBackgroundMusicPlayerV2(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule), singletonC.provideExoplayerProvider.get());

        case 1: // com.google.android.exoplayer2.ExoPlayer 
        return (T) ExoPlayerModule_ProvideExoplayerFactory.provideExoplayer(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule));

        case 2: // com.example.musify.data.repositories.tokenrepository.SpotifyTokenRepository 
        return (T) new SpotifyTokenRepository(singletonC.provideTokenManagerProvider.get(), new AndroidBase64Encoder());

        case 3: // com.example.musify.data.remote.token.tokenmanager.TokenManager 
        return (T) MusicServiceModule_ProvideTokenManagerFactory.provideTokenManager();

        case 4: // com.example.musify.data.remote.musicservice.SpotifyService 
        return (T) MusicServiceModule_ProvideSpotifyServiceFactory.provideSpotifyService();

        default: throw new AssertionError(id);
      }
    }
  }
}
