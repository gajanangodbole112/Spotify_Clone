// Generated by Dagger (https://dagger.dev).
package com.example.musify.viewmodels.artistviewmodel;

import android.app.Application;
import androidx.lifecycle.SavedStateHandle;
import com.example.musify.data.repositories.albumsrepository.AlbumsRepository;
import com.example.musify.data.repositories.tracksrepository.TracksRepository;
import com.example.musify.usecases.getCurrentlyPlayingTrackUseCase.GetCurrentlyPlayingTrackUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ArtistDetailViewModel_Factory implements Factory<ArtistDetailViewModel> {
  private final Provider<Application> applicationProvider;

  private final Provider<SavedStateHandle> savedStateHandleProvider;

  private final Provider<AlbumsRepository> albumsRepositoryProvider;

  private final Provider<GetCurrentlyPlayingTrackUseCase> getCurrentlyPlayingTrackUseCaseProvider;

  private final Provider<TracksRepository> tracksRepositoryProvider;

  public ArtistDetailViewModel_Factory(Provider<Application> applicationProvider,
      Provider<SavedStateHandle> savedStateHandleProvider,
      Provider<AlbumsRepository> albumsRepositoryProvider,
      Provider<GetCurrentlyPlayingTrackUseCase> getCurrentlyPlayingTrackUseCaseProvider,
      Provider<TracksRepository> tracksRepositoryProvider) {
    this.applicationProvider = applicationProvider;
    this.savedStateHandleProvider = savedStateHandleProvider;
    this.albumsRepositoryProvider = albumsRepositoryProvider;
    this.getCurrentlyPlayingTrackUseCaseProvider = getCurrentlyPlayingTrackUseCaseProvider;
    this.tracksRepositoryProvider = tracksRepositoryProvider;
  }

  @Override
  public ArtistDetailViewModel get() {
    return newInstance(applicationProvider.get(), savedStateHandleProvider.get(), albumsRepositoryProvider.get(), getCurrentlyPlayingTrackUseCaseProvider.get(), tracksRepositoryProvider.get());
  }

  public static ArtistDetailViewModel_Factory create(Provider<Application> applicationProvider,
      Provider<SavedStateHandle> savedStateHandleProvider,
      Provider<AlbumsRepository> albumsRepositoryProvider,
      Provider<GetCurrentlyPlayingTrackUseCase> getCurrentlyPlayingTrackUseCaseProvider,
      Provider<TracksRepository> tracksRepositoryProvider) {
    return new ArtistDetailViewModel_Factory(applicationProvider, savedStateHandleProvider, albumsRepositoryProvider, getCurrentlyPlayingTrackUseCaseProvider, tracksRepositoryProvider);
  }

  public static ArtistDetailViewModel newInstance(Application application,
      SavedStateHandle savedStateHandle, AlbumsRepository albumsRepository,
      GetCurrentlyPlayingTrackUseCase getCurrentlyPlayingTrackUseCase,
      TracksRepository tracksRepository) {
    return new ArtistDetailViewModel(application, savedStateHandle, albumsRepository, getCurrentlyPlayingTrackUseCase, tracksRepository);
  }
}
