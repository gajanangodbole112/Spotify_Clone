// Generated by Dagger (https://dagger.dev).
package com.example.musify.viewmodels.searchviewmodel;

import android.app.Application;
import com.example.musify.data.repositories.genresrepository.GenresRepository;
import com.example.musify.data.repositories.searchrepository.SearchRepository;
import com.example.musify.usecases.getCurrentlyPlayingTrackUseCase.GetCurrentlyPlayingTrackUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SearchViewModel_Factory implements Factory<SearchViewModel> {
  private final Provider<Application> applicationProvider;

  private final Provider<GetCurrentlyPlayingTrackUseCase> getCurrentlyPlayingTrackUseCaseProvider;

  private final Provider<CoroutineDispatcher> ioDispatcherProvider;

  private final Provider<GenresRepository> genresRepositoryProvider;

  private final Provider<SearchRepository> searchRepositoryProvider;

  public SearchViewModel_Factory(Provider<Application> applicationProvider,
      Provider<GetCurrentlyPlayingTrackUseCase> getCurrentlyPlayingTrackUseCaseProvider,
      Provider<CoroutineDispatcher> ioDispatcherProvider,
      Provider<GenresRepository> genresRepositoryProvider,
      Provider<SearchRepository> searchRepositoryProvider) {
    this.applicationProvider = applicationProvider;
    this.getCurrentlyPlayingTrackUseCaseProvider = getCurrentlyPlayingTrackUseCaseProvider;
    this.ioDispatcherProvider = ioDispatcherProvider;
    this.genresRepositoryProvider = genresRepositoryProvider;
    this.searchRepositoryProvider = searchRepositoryProvider;
  }

  @Override
  public SearchViewModel get() {
    return newInstance(applicationProvider.get(), getCurrentlyPlayingTrackUseCaseProvider.get(), ioDispatcherProvider.get(), genresRepositoryProvider.get(), searchRepositoryProvider.get());
  }

  public static SearchViewModel_Factory create(Provider<Application> applicationProvider,
      Provider<GetCurrentlyPlayingTrackUseCase> getCurrentlyPlayingTrackUseCaseProvider,
      Provider<CoroutineDispatcher> ioDispatcherProvider,
      Provider<GenresRepository> genresRepositoryProvider,
      Provider<SearchRepository> searchRepositoryProvider) {
    return new SearchViewModel_Factory(applicationProvider, getCurrentlyPlayingTrackUseCaseProvider, ioDispatcherProvider, genresRepositoryProvider, searchRepositoryProvider);
  }

  public static SearchViewModel newInstance(Application application,
      GetCurrentlyPlayingTrackUseCase getCurrentlyPlayingTrackUseCase,
      CoroutineDispatcher ioDispatcher, GenresRepository genresRepository,
      SearchRepository searchRepository) {
    return new SearchViewModel(application, getCurrentlyPlayingTrackUseCase, ioDispatcher, genresRepository, searchRepository);
  }
}
