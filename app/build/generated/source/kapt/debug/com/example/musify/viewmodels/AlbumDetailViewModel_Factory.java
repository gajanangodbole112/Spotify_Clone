// Generated by Dagger (https://dagger.dev).
package com.example.musify.viewmodels;

import android.app.Application;
import androidx.lifecycle.SavedStateHandle;
import com.example.musify.data.repositories.tracksrepository.TracksRepository;
import com.example.musify.usecases.getCurrentlyPlayingTrackUseCase.GetCurrentlyPlayingTrackUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AlbumDetailViewModel_Factory implements Factory<AlbumDetailViewModel> {
  private final Provider<Application> applicationProvider;

  private final Provider<SavedStateHandle> savedStateHandleProvider;

  private final Provider<GetCurrentlyPlayingTrackUseCase> getCurrentlyPlayingTrackUseCaseProvider;

  private final Provider<TracksRepository> tracksRepositoryProvider;

  public AlbumDetailViewModel_Factory(Provider<Application> applicationProvider,
      Provider<SavedStateHandle> savedStateHandleProvider,
      Provider<GetCurrentlyPlayingTrackUseCase> getCurrentlyPlayingTrackUseCaseProvider,
      Provider<TracksRepository> tracksRepositoryProvider) {
    this.applicationProvider = applicationProvider;
    this.savedStateHandleProvider = savedStateHandleProvider;
    this.getCurrentlyPlayingTrackUseCaseProvider = getCurrentlyPlayingTrackUseCaseProvider;
    this.tracksRepositoryProvider = tracksRepositoryProvider;
  }

  @Override
  public AlbumDetailViewModel get() {
    return newInstance(applicationProvider.get(), savedStateHandleProvider.get(), getCurrentlyPlayingTrackUseCaseProvider.get(), tracksRepositoryProvider.get());
  }

  public static AlbumDetailViewModel_Factory create(Provider<Application> applicationProvider,
      Provider<SavedStateHandle> savedStateHandleProvider,
      Provider<GetCurrentlyPlayingTrackUseCase> getCurrentlyPlayingTrackUseCaseProvider,
      Provider<TracksRepository> tracksRepositoryProvider) {
    return new AlbumDetailViewModel_Factory(applicationProvider, savedStateHandleProvider, getCurrentlyPlayingTrackUseCaseProvider, tracksRepositoryProvider);
  }

  public static AlbumDetailViewModel newInstance(Application application,
      SavedStateHandle savedStateHandle,
      GetCurrentlyPlayingTrackUseCase getCurrentlyPlayingTrackUseCase,
      TracksRepository tracksRepository) {
    return new AlbumDetailViewModel(application, savedStateHandle, getCurrentlyPlayingTrackUseCase, tracksRepository);
  }
}
